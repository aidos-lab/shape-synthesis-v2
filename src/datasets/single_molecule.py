import torch


class To3DNormalizedCoords:
    """Function to get the 3D coordinates from QM9."""

    def __call__(self, x):
        data = x[:, -3:]
        data -= data.mean(axis=0)
        data /= data.norm(dim=-1).max()
        data *= 0.7
        return data


def get_dataset():
    x = torch.tensor(
        [
            [1.38963128, 1.30881270, -1.84807340],
            [0.25134028, 1.61695797, -1.17378268],
            [2.34174165, 2.30279245, -2.05237245],
            [1.74670811, 0.30770268, -2.08813647],
            [0.05520299, 2.95681402, -0.72831891],
            [-0.81096017, 0.83736826, -0.91802960],
            [-1.10099896, 3.26937222, -0.10832467],
            [0.91391981, 3.92808926, -0.99610811],
            [-1.73558122, 2.55577479, 0.18972739],
            [-1.19481836, 4.21421525, 0.12159553],
            [2.07766676, 3.62803433, -1.63042725],
            [2.81650095, 4.38833396, -1.67628005],
            [3.23433192, 2.10381485, -2.63100063],
            [-0.57931678, -0.63039174, -0.91326348],
            [-1.77506852, -1.28327640, -0.40022312],
            [0.20195626, -0.97701420, -0.35217348],
            [-0.31077873, -0.89430482, -2.04282024],
            [-3.00526392, -1.38331587, -1.13839590],
            [-1.88488065, -1.72681611, 0.94414745],
            [-4.15739837, -2.00672026, -0.71479091],
            [-2.95735117, -1.01520162, -2.24735924],
            [-4.19469156, -2.42753431, 0.61887066],
            [-5.04818305, -2.24955496, -1.33679401],
            [-3.08464301, -2.27809040, 1.38882121],
            [-5.07725553, -2.96292210, 1.05906295],
            [-3.24228124, -2.56751763, 2.40845989],
            [-1.09224915, -1.37255578, 1.68160820],
        ]
    )
    z = torch.tensor(
        [
            6,
            6,
            6,
            1,
            6,
            8,
            7,
            7,
            1,
            1,
            6,
            1,
            1,
            6,
            6,
            1,
            1,
            6,
            6,
            6,
            1,
            6,
            1,
            6,
            1,
            1,
            1,
        ]
    )
    # Normalize and get the scaling factor
    to_angstrom = x.norm(dim=-1).max().item() / 0.7
    x = To3DNormalizedCoords()(x)
    return x, z, to_angstrom
